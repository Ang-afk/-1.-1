import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;

public class SnakeGame extends JFrame {
    private final int CELL_SIZE = 20; // Размер одной клетки
    private final int WIDTH = 20;      // Ширина игрового поля в клетках
    private final int HEIGHT = 20;     // Высота игрового поля в клетках
    private final int[][] board;        // Игровое поле
    private ArrayList<Point> snake;     // Змейка
    private Point food;                 // Позиция еды
    private char direction;             // Направление движения змейки
    private boolean gameOver;           // Флаг окончания игры
    private int score;                  // Счет

    public SnakeGame() {
        board = new int[WIDTH][HEIGHT];
        snake = new ArrayList<>();
        snake.add(new Point(WIDTH / 2, HEIGHT / 2)); // Начальная позиция змейки
        direction = 'U'; // Начальное направление (вверх)
        score = 0;
        gameOver = false;

        setTitle("Snake Game");
        setSize(WIDTH * CELL_SIZE, HEIGHT * CELL_SIZE);
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                        if (direction != 'D') direction = 'U';
                        break;
                    case KeyEvent.VK_DOWN:
                        if (direction != 'U') direction = 'D';
                        break;
                    case KeyEvent.VK_LEFT:
                        if (direction != 'R') direction = 'L';
                        break;
                    case KeyEvent.VK_RIGHT:
                        if (direction != 'L') direction = 'R';
                        break;
                }
            }
        });

        Timer timer = new Timer(100, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!gameOver) {
                    move();
                    checkCollision();
                    repaint();
                }
            }
        });
        timer.start();
        generateFood();
    }

    private void move() {
        Point head = snake.get(0);
        Point newHead = new Point(head);

        switch (direction) {
            case 'U':
                newHead.translate(0, -1);
                break;
            case 'D':
                newHead.translate(0, 1);
                break;
            case 'L':
                newHead.translate(-1, 0);
                break;
            case 'R':
                newHead.translate(1, 0);
                break;
        }

        snake.add(0, newHead); // Добавляем новую голову

        // Проверяем, съела ли змейка еду
        if (newHead.equals(food)) {
            score++;
            generateFood(); // Генерируем новую еду
        } else {
            snake.remove(snake.size() - 1); // Удаляем последний элемент
        }
    }

    private void checkCollision() {
        Point head = snake.get(0);

        // Проверка столкновения со стенками
        if (head.x < 0 || head.x >= WIDTH || head.y < 0 || head.y >= HEIGHT) {
            gameOver = true;
        }

        // Проверка столкновения с самой собой
        for (int i = 1; i < snake.size(); i++) {
            if (head.equals(snake.get(i))) {
                gameOver = true;
                break;
            }
        }
    }

    private void generateFood() {
        Random rand = new Random();
        int x, y;

        do {
            x = rand.nextInt(WIDTH);           
            y = rand.nextInt(HEIGHT);
            food = new Point(x, y);
        } while (snake.contains(food)); // Убедимся, что еда не появляется на змейке
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        
        // Отображение змейки
        g.setColor(Color.GREEN);
        for (Point p : snake) {
            g.fillRect(p.x * CELL_SIZE, p.y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
        }

        // Отображение еды
        g.setColor(Color.RED);
        g.fillRect(food.x * CELL_SIZE, food.y * CELL_SIZE, CELL_SIZE, CELL_SIZE);

        // Отображение счета
        g.setColor(Color.BLACK);
        g.drawString("Score: " + score, 10, 10);

        // Отображение сообщения об окончании игры
        if (gameOver) {
            g.setColor(Color.BLACK);
            g.drawString("Game Over! Press R to Restart", WIDTH * CELL_SIZE / 4, HEIGHT * CELL_SIZE / 2);
        }
    }

    public static void main(String[] args) {
        SnakeGame game = new SnakeGame();
        game.setVisible(true);

        game.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (game.gameOver && e.getKeyCode() == KeyEvent.VK_R) {
                    game.restart();
                }
            }
        });
    }

    private void restart() {
        snake.clear();
        snake.add(new Point(WIDTH / 2, HEIGHT / 2));
        direction = 'U';
        score = 0;
        gameOver = false;
        generateFood();
    }
}
